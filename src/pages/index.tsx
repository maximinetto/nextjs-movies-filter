import ListOfMovies from "@/components/ListOfMovies";
import { unexpectedMessage } from "@/errors/messages/unexpected";
import NotFoundError from "@/errors/NotFoundError";
import useFilters from "@/hooks/useFilters";
import useMovies from "@/hooks/useMovies";
import getMoviesServiceFromServer from "@/services/server/getMovies";
import styles from "@/styles/Home.module.css";
import { ListOfMoviesAlternative } from "@/types/ListOfMovies";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEventHandler } from "react";

const Home: React.FC<ListOfMoviesAlternative> = ({
  movieList,
  errorServer,
}) => {
  const { search, updateSearch, sort, updateSort, error } = useFilters();
  const {
    movies,
    isLoading,
    getMovies,
    error: errorMovies,
  } = useMovies({
    movieList,
    search,
    defaultError: errorServer,
    sort,
  });

  const router = useRouter();

  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {
    const newQuery = event.target.value;
    updateSearch(newQuery);
  };

  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (
    event
  ) => {
    event.preventDefault();
    await getMovies();
    router.push(
      {
        query: {
          search,
        },
      },
      undefined,
      { shallow: true }
    );
  };

  return (
    <div className="page">
      <Head>
        <title>Movie finder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <h1>Movie finder</h1>
        <form className={styles.form} onSubmit={handleSubmit}>
          <input
            name="query"
            value={search}
            onChange={handleChange}
            placeholder="Avengers, Star Wars, The Matrix..."
          />
          <input
            type="checkbox"
            name="sort"
            checked={sort}
            onChange={updateSort}
          />
          <button type="submit">Search</button>
        </form>
        {error && <p style={{ color: "red" }}>{error}</p>}
      </header>
      <main className={styles.main}>
        <ListOfMovies
          movies={movies}
          isLoading={isLoading}
          error={errorMovies}
        />
      </main>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const { search = "" }: { search?: string } = query;

  try {
    const movies = await getMoviesServiceFromServer({ search });
    return {
      props: {
        movieList: movies,
      },
    };
  } catch (error) {
    if (error instanceof NotFoundError) {
      return {
        props: {
          movieList: [],
          errorServer: error.message,
        },
      };
    }
    return {
      props: {
        movieList: [],
        errorServer: unexpectedMessage,
      },
    };
  }
};
